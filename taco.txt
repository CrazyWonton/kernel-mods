#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/fs.h>
#include <asm/uaccess.h> /* for put_user */

int init_module(void);
void cleanup_module(void);
static int device_open(struct inode *, struct file *);
static int device_release(struct inode *, struct file *);
static ssize_t device_read(struct file *, char *, size_t, loff_t *);
static ssize_t device_write(struct file *, const char *, size_t, loff_t *);

#define SUCCESS 0
#define DEVICE_NAME "my_chardev"
#define BUF_LEN 80

MODULE_AUTHOR("Kevin Tarczali");
MODULE_DESCRIPTION("Part-C of 320 HW");
MODULE_VERSION("0.1");

static int Major;
static int Device_Open = 0;
static char msg[BUF_LEN];
static char *msg_Ptr;

static struct file_operations fops = {
	.read = device_read,
	.write = device_write,
	.open = device_open,
	.release = device_release
};


int init_module(void){
	Major = register_chrdev(0, DEVICE_NAME, &fops);

	if (Major < 0){
		printk(KERN_ALERT "Registering char device failed with %d\n", Major);
		return Major;
	}

	printk(KERN_INFO "Major = %d\n", Major);
	printk(KERN_INFO "Device Name = %s\n", DEVICE_NAME);
	return SUCCESS;
}

void cleanup_module(void){
	unregister_chrdev(Major, DEVICE_NAME);
}


static int device_open(struct inode *inode, struct file *filp){
	static int counter = 0;

	if (Device_Open)
		return -EBUSY;

	Device_Open++;
	sprintf(msg, "I already told you %d times Hello world!\n", counter++);
	msg_Ptr = msg;
	//risky code below
	try_module_get(THIS_MODULE);

	return SUCCESS;
}

static int device_release(struct inode *inode, struct file *filp){
	Device_Open--;

	//risky code below
	module_put(THIS_MODULE);

	return SUCCESS;
}

static ssize_t device_read(struct file *filp, /* see include/linux/fs.h   */
		char *buffer,      /* buffer to fill with data */
		size_t length,     /* length of the buffer     */
		loff_t *offset){
	int bytes_read = 0;

	if (*msg_Ptr == 0)
		return 0;

	while (length && *msg_Ptr) {
		/*
		 * The buffer is in the user data segment, not the kernel segment so "*"
		 * assignment won't work. We have to use put_user which copies data from the
		 * kernel data segment to the user data segment.
		 */
		put_user(*(msg_Ptr++), buffer++);
		length--;
		bytes_read++;
	}

	/*
	 * Most read functions return the number of bytes put into the buffer
	 */
	return bytes_read;
}

/*
 * Called when a process writes to dev file: echo "hi" > /dev/hello
 */
	static ssize_t
device_write(struct file *filp, const char *buf, size_t len, loff_t *off)
{
	printk(KERN_ALERT "Sorry, this operation isn't supported.\n");
	return -EINVAL;
}
